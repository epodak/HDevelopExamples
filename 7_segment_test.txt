* 7_segment_test.hdev

* turn off automatic output into the graphics window
* dev_update_window('off')

* close any previously open windows
dev_close_window()

* read in the model DXF file
read_contour_xld_dxf(xldModel, '7_segment_model.dxf', [], [], dxfStatus)

* before we can open a window to show the DXF model, we need to calculate the size . . .
* find the smallest enclosing upright rectangle to get the left-most, right-most, top-most, and bottom-most points of where the actual shapes are
smallest_rectangle1_xld(xldModel, y1s, x1s, y2s, x2s)

* first we will calculate the DXF model width and height . . .
* combine all Xs into a single tuple and combine all Ys into a single tuple
xs := [x1s, x2s]
ys := [y1s, y2s]

* find the minimum X (left-most point) and find the maximum X (right-most point)
tuple_min(xs, minX)
tuple_max(xs, maxX)

* find the minimum Y (top-most point) and find the maximum Y (bottom-most point)
tuple_min(ys, minY)
tuple_max(ys, maxY)

* now we can calculate the DXF model width and height
xldModelWidth := ceil(maxX) - floor(minX)
xldModelHeight := ceil(maxY) - floor(minY)

* if the DXF model has negative X or Y points, shift so lowest X and/or Y points are zero . . .
hom_mat2d_identity(transformMatrixTranslate)

if(minX < 0)
    absMinX := abs(minX)
    hom_mat2d_translate_local(transformMatrixTranslate, absMinX, 0, transformMatrixTranslate)
endif

if(minY < 0)
    absMinY := abs(minY)
    hom_mat2d_translate_local(transformMatrixTranslate, 0, absMinY, transformMatrixTranslate)
endif

affine_trans_contour_xld(xldModel, xldModel, transformMatrixTranslate)

* this opens the window correctly, but the model is way too small to see
dev_open_window(150, 300, xldModelWidth, xldModelHeight, 'black', windowHandle)
dev_display(xldModel)
*stop()

* next we will scale up the DXF XLD model, then display again . . .
XLD_SCALE_FACTOR := 13.158

xldModelWidthScaled := xldModelWidth * XLD_SCALE_FACTOR
xldModelHeightScaled := xldModelHeight * XLD_SCALE_FACTOR

hom_mat2d_identity(transformMatrixScale)
hom_mat2d_scale_local(transformMatrixScale, XLD_SCALE_FACTOR, XLD_SCALE_FACTOR, transformMatrixScale)
affine_trans_contour_xld(xldModel, xldModelScaled, transformMatrixScale)

dev_close_window()
dev_open_window(150, 300, xldModelWidthScaled, xldModelHeightScaled, 'black', windowHandle)
dev_display(xldModelScaled)
*stop()

* read in our image
read_image(imgOriginal, '7_segment_pass.png')

* get the width and height of the image so we can open the window to the correct size in the next line
get_image_size(imgOriginal, imageWidth, imageHeight)

* open a window, scale the window down to 1/2 size so we can see the entire image
dev_close_window()
dev_open_window(100, 100, imageWidth / 2, imageHeight / 2, 'black', windowHandle)

* show the image
dev_display(imgOriginal)

* create the shape model from the DXF xld contours
create_shape_model_xld(xldModelScaled, 'auto', rad(-5.0), rad(10.0), 'auto', 'auto', 'ignore_local_polarity', 5, modelID)

* find the model in the image
find_shape_model(imgOriginal, modelID, rad(-5.0), rad(10), 0.5, 1, 0.5, 'least_squares', 0, 0.9, centerYs, centerXs, angles, scores)

* center the match and visualize
vector_angle_to_rigid(0, 0, 0, centerYs, centerXs, angles, homMat2D)
get_shape_model_contours(modelContours, modelID, 1)
affine_trans_contour_xld(modelContours, xldModel, homMat2D)

* call to set_shape_model_metric, note there is no return value (data is internally stored with modelID ??)
set_shape_model_metric(imgOriginal, modelID, homMat2D, 'use_polarity')

* read an image
read_image(imgOriginal, '7_segment_fail_1')

* find the shape model again, will be slightly faster this time due to previous call to set_shape_model_metric
find_shape_model(imgOriginal, modelID, rad(-5.0), rad(10), 0.5, 1, 0.5, 'least_squares', 0, 0.9, centerYs, centerXs, angles, scores)

* center the match and visualize
vector_angle_to_rigid(0, 0, 0, centerYs, centerXs, angles, homMat2D)
get_shape_model_contours(modelContours, modelID, 1)
affine_trans_contour_xld(modelContours, xldModel, homMat2D)

* try converting both to regions, find the difference
threshold(imgOriginal, regThresh, 75, 255)
gen_region_contour_xld(xldModel, regModel, 'filled')
symm_difference(regThresh, regModel, regDiff)
connection(regDiff, regConnected)
select_shape(regConnected, selectedRegions, 'inner_radius', 'and', 4, 99999999)

* erosion_rectangle1(regDiff, regDiff, 5, 5)
* dilation_rectangle1(regDiff, regDiff, 5, 5)












