* 7_segment_test.hdev

* turn off automatic output into the graphics window
* dev_update_window('off')

* close any previously open windows
dev_close_window()

* read in the model DXF file
read_contour_xld_dxf(xldModel, '7_segment_model.dxf', [], [], dxfStatus)

* before we can open a window to show the DXF model, we need to calculate the size . . .
* find the smallest enclosing upright rectangle to get the left-most, right-most, top-most, and bottom-most points of where the actual shapes are
smallest_rectangle1_xld(xldModel, y1s, x1s, y2s, x2s)

* first we will calculate the DXF model width and height . . .
* combine all Xs into a single tuple and combine all Ys into a single tuple
xs := [x1s, x2s]
ys := [y1s, y2s]

* find the minimum X (left-most point) and find the maximum X (right-most point)
tuple_min(xs, minX)
tuple_max(xs, maxX)

* find the minimum Y (top-most point) and find the maximum Y (bottom-most point)
tuple_min(ys, minY)
tuple_max(ys, maxY)

* now we can calculate the DXF model width and height
xldModelWidth := ceil(maxX) - floor(minX)
xldModelHeight := ceil(maxY) - floor(minY)

* if the DXF model has negative X or Y points, shift so lowest X and/or Y points are zero . . .
hom_mat2d_identity(transformMatrixTranslate)

if(minX < 0)
    absMinX := abs(minX)
    hom_mat2d_translate_local(transformMatrixTranslate, absMinX, 0, transformMatrixTranslate)
endif

if(minY < 0)
    absMinY := abs(minY)
    hom_mat2d_translate_local(transformMatrixTranslate, 0, absMinY, transformMatrixTranslate)
endif

affine_trans_contour_xld(xldModel, xldModel, transformMatrixTranslate)

* this opens the window correctly, but the model is way too small to see
dev_open_window(150, 300, xldModelWidth, xldModelHeight, 'black', windowHandle)
dev_display(xldModel)
*stop()

* next we will scale up the DXF XLD model, then display again . . .
XLD_SCALE_FACTOR := 100

xldModelWidthScaled := xldModelWidth * XLD_SCALE_FACTOR
xldModelHeightScaled := xldModelHeight * XLD_SCALE_FACTOR

hom_mat2d_identity(transformMatrixScale)
hom_mat2d_scale_local(transformMatrixScale, XLD_SCALE_FACTOR, XLD_SCALE_FACTOR, transformMatrixScale)
affine_trans_contour_xld(xldModel, xldModelScaled, transformMatrixScale)

dev_open_window(150, 300, xldModelWidthScaled, xldModelHeightScaled, 'black', windowHandle)
dev_display(xldModelScaled)
*stop()

* read in our 4 images
read_image(image1, '7_segment_pass.png')
read_image(image2, '7_segment_fail_1.png')
read_image(image3, '7_segment_fail_2.png')
read_image(image4, '7_segment_fail_3.png')

* get the width and height of the image so we can open the window to the correct size in the next line
get_image_size(image1, imageWidth, imageHeight)

* open a window, scale the window down to 1/2 size so we can see the entire image
dev_open_window(100, 100, imageWidth / 2, imageHeight / 2, 'black', windowHandle)

* show the images
dev_display(image1)
*stop()
dev_display(image2)
*stop()
dev_display(image3)
*stop()
dev_display(image4)
*stop()

threshold(image1, regionOfImage1, 80, 255)

union1(regionOfImage1, regionOfImage1)

smallest_rectangle1(regionOfImage1, y1, x1, y2, x2)

*erosion_rectangle1(regionOfImage1, regionOfImage1, 3, 3)
*erosion_rectangle1(regionOfImage1, regionOfImage1, 3, 3)

region_to_bin(regionOfImage1, binImage, 255, 0, imageWidth, imageHeight)

crop_rectangle1(binImage, imageCropped, y1, x1, y2, x2)

croppedImageWidth := y2 - y1
croppedImageHeight := x2 - x1

hom_mat2d_identity(translationMatrix2)
hom_mat2d_scale_local(translationMatrix2, xldModelWidthScaled / croppedImageWidth, xldModelHeightScaled / croppedImageHeight, translationMatrix2)

*affine_trans_image(imageCropped, imageCropped, translationMatrix2, 'constant', 'true')
*affine_trans_image_size(imageCropped, imageCropped, translationMatrix2, 'constant', xldModelWidthScaled, xldModelHeightScaled)
affine_trans_image_size(imageCropped, imageCropped, translationMatrix2, 'constant', xldModelHeightScaled * 1.05, xldModelWidthScaled * 1.05)

hom_mat2d_identity(matrixSlightShift)
hom_mat2d_translate_local(matrixSlightShift, xldModelWidthScaled * 0.025, xldModelHeightScaled * 0.025, matrixSlightShift)
affine_trans_image(imageCropped, imageCropped2, matrixSlightShift,'constant', 'false')

stop()

create_shape_model_xld(xldModelScaled, 'auto', 0, rad(360), 'auto', 'no_pregeneration', 'ignore_local_polarity', 10, shapeModel)

get_shape_model_contours(shapeModelContours, shapeModel, 1)

find_shape_model(imageCropped2, shapeModel, 0, rad(360), 0.7, 0, 0.5, 'interpolation', 0, 0.9, centerYs, centerXs, angles, scores)

gen_empty_obj(affineTransformedRegions)

for i := 0 to |centerYs| - 1 by 1
    
    * instantiate a transform matrix
    hom_mat2d_identity(translationMatrix)
    
    * update matrix to rotate
    hom_mat2d_rotate(translationMatrix, angles[i], 0, 0, translationMatrix)
    
    * update matrix to translate
    hom_mat2d_translate(translationMatrix, centerYs[i], centerXs[i], translationMatrix)
    
    * perform affine transform
    affine_trans_contour_xld(shapeModelContours, affineTransformedContour, translationMatrix)
    
    * convert XLD contour into region
    gen_region_contour_xld(affineTransformedContour, affineTransformedRegion, 'margin')
    
    * add affine transformed region to array of affine transformed regions
    concat_obj(affineTransformedRegions, affineTransformedRegion, affineTransformedRegions)
    
endfor

dev_set_draw('margin')
dev_set_line_width(6)
dev_display(affineTransformedRegions)














