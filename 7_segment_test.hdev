<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0.1">
<procedure name="main">
<interface/>
<body>
<c>* 7_segment_test.hdev</c>
<c></c>
<c>* turn off automatic output into the graphics window</c>
<l>* dev_update_window('off')</l>
<c></c>
<c>* close any previously open windows</c>
<l>dev_close_window()</l>
<c></c>
<c>* read in the model DXF file</c>
<l>read_contour_xld_dxf(xldModel, '7_segment_model.dxf', [], [], dxfStatus)</l>
<c></c>
<c>* before we can open a window to show the DXF model, we need to calculate the size . . .</c>
<c>* find the smallest enclosing upright rectangle to get the left-most, right-most, top-most, and bottom-most points of where the actual shapes are</c>
<l>smallest_rectangle1_xld(xldModel, y1s, x1s, y2s, x2s)</l>
<c></c>
<c>* first we will calculate the DXF model width and height . . .</c>
<c>* combine all Xs into a single tuple and combine all Ys into a single tuple</c>
<l>xs := [x1s, x2s]</l>
<l>ys := [y1s, y2s]</l>
<c></c>
<c>* find the minimum X (left-most point) and find the maximum X (right-most point)</c>
<l>tuple_min(xs, minX)</l>
<l>tuple_max(xs, maxX)</l>
<c></c>
<c>* find the minimum Y (top-most point) and find the maximum Y (bottom-most point)</c>
<l>tuple_min(ys, minY)</l>
<l>tuple_max(ys, maxY)</l>
<c></c>
<c>* now we can calculate the DXF model width and height</c>
<l>xldModelWidth := ceil(maxX) - floor(minX)</l>
<l>xldModelHeight := ceil(maxY) - floor(minY)</l>
<c></c>
<c>* if the DXF model has negative X or Y points, shift so lowest X and/or Y points are zero . . .</c>
<l>hom_mat2d_identity(transformMatrixTranslate)</l>
<c></c>
<l>if(minX &lt; 0)</l>
<l>    absMinX := abs(minX)</l>
<l>    hom_mat2d_translate_local(transformMatrixTranslate, absMinX, 0, transformMatrixTranslate)</l>
<l>endif</l>
<c></c>
<l>if(minY &lt; 0)</l>
<l>    absMinY := abs(minY)</l>
<l>    hom_mat2d_translate_local(transformMatrixTranslate, 0, absMinY, transformMatrixTranslate)</l>
<l>endif</l>
<c></c>
<l>affine_trans_contour_xld(xldModel, xldModel, transformMatrixTranslate)</l>
<c></c>
<c>* this opens the window correctly, but the model is way too small to see</c>
<l>dev_open_window(150, 300, xldModelWidth, xldModelHeight, 'black', windowHandle)</l>
<l>dev_display(xldModel)</l>
<l>*stop()</l>
<c></c>
<c>* next we will scale up the DXF XLD model, then display again . . .</c>
<l>XLD_SCALE_FACTOR := 100</l>
<c></c>
<l>xldModelWidthScaled := xldModelWidth * XLD_SCALE_FACTOR</l>
<l>xldModelHeightScaled := xldModelHeight * XLD_SCALE_FACTOR</l>
<c></c>
<l>hom_mat2d_identity(transformMatrixScale)</l>
<l>hom_mat2d_scale_local(transformMatrixScale, XLD_SCALE_FACTOR, XLD_SCALE_FACTOR, transformMatrixScale)</l>
<l>affine_trans_contour_xld(xldModel, xldModelScaled, transformMatrixScale)</l>
<c></c>
<l>dev_open_window(150, 300, xldModelWidthScaled, xldModelHeightScaled, 'black', windowHandle)</l>
<l>dev_display(xldModelScaled)</l>
<l>*stop()</l>
<c></c>
<c>* read in our 4 images</c>
<l>read_image(image1, '7_segment_pass.png')</l>
<l>read_image(image2, '7_segment_fail_1.png')</l>
<l>read_image(image3, '7_segment_fail_2.png')</l>
<l>read_image(image4, '7_segment_fail_3.png')</l>
<c></c>
<c>* get the width and height of the image so we can open the window to the correct size in the next line</c>
<l>get_image_size(image1, imageWidth, imageHeight)</l>
<c></c>
<c>* open a window, scale the window down to 1/2 size so we can see the entire image</c>
<l>dev_open_window(100, 100, imageWidth / 2, imageHeight / 2, 'black', windowHandle)</l>
<c></c>
<c>* show the images</c>
<l>dev_display(image1)</l>
<l>*stop()</l>
<l>dev_display(image2)</l>
<l>*stop()</l>
<l>dev_display(image3)</l>
<l>*stop()</l>
<l>dev_display(image4)</l>
<l>*stop()</l>
<c></c>
<l>threshold(image1, regionOfImage1, 80, 255)</l>
<c></c>
<l>union1(regionOfImage1, regionOfImage1)</l>
<c></c>
<l>smallest_rectangle1(regionOfImage1, y1, x1, y2, x2)</l>
<c></c>
<l>*erosion_rectangle1(regionOfImage1, regionOfImage1, 3, 3)</l>
<l>*erosion_rectangle1(regionOfImage1, regionOfImage1, 3, 3)</l>
<c></c>
<l>region_to_bin(regionOfImage1, binImage, 255, 0, imageWidth, imageHeight)</l>
<c></c>
<l>crop_rectangle1(binImage, imageCropped, y1, x1, y2, x2)</l>
<c></c>
<l>croppedImageWidth := y2 - y1</l>
<l>croppedImageHeight := x2 - x1</l>
<c></c>
<l>hom_mat2d_identity(translationMatrix2)</l>
<l>hom_mat2d_scale_local(translationMatrix2, xldModelWidthScaled / croppedImageWidth, xldModelHeightScaled / croppedImageHeight, translationMatrix2)</l>
<c></c>
<l>*affine_trans_image(imageCropped, imageCropped, translationMatrix2, 'constant', 'true')</l>
<l>*affine_trans_image_size(imageCropped, imageCropped, translationMatrix2, 'constant', xldModelWidthScaled, xldModelHeightScaled)</l>
<l>affine_trans_image_size(imageCropped, imageCropped, translationMatrix2, 'constant', xldModelHeightScaled * 1.05, xldModelWidthScaled * 1.05)</l>
<c></c>
<l>hom_mat2d_identity(matrixSlightShift)</l>
<l>hom_mat2d_translate_local(matrixSlightShift, xldModelWidthScaled * 0.025, xldModelHeightScaled * 0.025, matrixSlightShift)</l>
<l>affine_trans_image(imageCropped, imageCropped2, matrixSlightShift,'constant', 'false')</l>
<c></c>
<l>stop()</l>
<c></c>
<l>create_shape_model_xld(xldModelScaled, 'auto', 0, rad(360), 'auto', 'no_pregeneration', 'ignore_local_polarity', 10, shapeModel)</l>
<c></c>
<l>get_shape_model_contours(shapeModelContours, shapeModel, 1)</l>
<c></c>
<l>find_shape_model(imageCropped2, shapeModel, 0, rad(360), 0.7, 0, 0.5, 'interpolation', 0, 0.9, centerYs, centerXs, angles, scores)</l>
<c></c>
<l>gen_empty_obj(affineTransformedRegions)</l>
<c></c>
<l>for i := 0 to |centerYs| - 1 by 1</l>
<c>    </c>
<c>    * instantiate a transform matrix</c>
<l>    hom_mat2d_identity(translationMatrix)</l>
<c>    </c>
<c>    * update matrix to rotate</c>
<l>    hom_mat2d_rotate(translationMatrix, angles[i], 0, 0, translationMatrix)</l>
<c>    </c>
<c>    * update matrix to translate</c>
<l>    hom_mat2d_translate(translationMatrix, centerYs[i], centerXs[i], translationMatrix)</l>
<c>    </c>
<c>    * perform affine transform</c>
<l>    affine_trans_contour_xld(shapeModelContours, affineTransformedContour, translationMatrix)</l>
<c>    </c>
<c>    * convert XLD contour into region</c>
<l>    gen_region_contour_xld(affineTransformedContour, affineTransformedRegion, 'margin')</l>
<c>    </c>
<c>    * add affine transformed region to array of affine transformed regions</c>
<l>    concat_obj(affineTransformedRegions, affineTransformedRegion, affineTransformedRegions)</l>
<c>    </c>
<l>endfor</l>
<c></c>
<l>dev_set_draw('margin')</l>
<l>dev_set_line_width(6)</l>
<l>dev_display(affineTransformedRegions)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
