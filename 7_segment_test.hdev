<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="12.0.1">
<procedure name="main">
<interface/>
<body>
<c>* 7_segment_test.hdev</c>
<c></c>
<c>* turn off automatic output into the graphics window</c>
<l>* dev_update_window('off')</l>
<c></c>
<c>* close any previously open windows</c>
<l>dev_close_window()</l>
<c></c>
<c>* read in the model DXF file</c>
<l>read_contour_xld_dxf(xldModel, '7_segment_model.dxf', [], [], dxfStatus)</l>
<c></c>
<c>* before we can open a window to show the DXF model, we need to calculate the size . . .</c>
<c>* find the smallest enclosing upright rectangle to get the left-most, right-most, top-most, and bottom-most points of where the actual shapes are</c>
<l>smallest_rectangle1_xld(xldModel, y1s, x1s, y2s, x2s)</l>
<c></c>
<c>* first we will calculate the DXF model width and height . . .</c>
<c>* combine all Xs into a single tuple and combine all Ys into a single tuple</c>
<l>xs := [x1s, x2s]</l>
<l>ys := [y1s, y2s]</l>
<c></c>
<c>* find the minimum X (left-most point) and find the maximum X (right-most point)</c>
<l>tuple_min(xs, minX)</l>
<l>tuple_max(xs, maxX)</l>
<c></c>
<c>* find the minimum Y (top-most point) and find the maximum Y (bottom-most point)</c>
<l>tuple_min(ys, minY)</l>
<l>tuple_max(ys, maxY)</l>
<c></c>
<c>* now we can calculate the DXF model width and height</c>
<l>xldModelWidth := ceil(maxX) - floor(minX)</l>
<l>xldModelHeight := ceil(maxY) - floor(minY)</l>
<c></c>
<c>* if the DXF model has negative X or Y points, shift so lowest X and/or Y points are zero . . .</c>
<l>hom_mat2d_identity(transformMatrixTranslate)</l>
<c></c>
<l>if(minX &lt; 0)</l>
<l>    absMinX := abs(minX)</l>
<l>    hom_mat2d_translate_local(transformMatrixTranslate, absMinX, 0, transformMatrixTranslate)</l>
<l>endif</l>
<c></c>
<l>if(minY &lt; 0)</l>
<l>    absMinY := abs(minY)</l>
<l>    hom_mat2d_translate_local(transformMatrixTranslate, 0, absMinY, transformMatrixTranslate)</l>
<l>endif</l>
<c></c>
<l>affine_trans_contour_xld(xldModel, xldModel, transformMatrixTranslate)</l>
<c></c>
<c>* this opens the window correctly, but the model is way too small to see</c>
<l>dev_open_window(150, 300, xldModelWidth, xldModelHeight, 'black', windowHandle)</l>
<l>dev_display(xldModel)</l>
<l>*stop()</l>
<c></c>
<c>* next we will scale up the DXF XLD model, then display again . . .</c>
<l>XLD_SCALE_FACTOR := 13.158</l>
<c></c>
<l>xldModelWidthScaled := xldModelWidth * XLD_SCALE_FACTOR</l>
<l>xldModelHeightScaled := xldModelHeight * XLD_SCALE_FACTOR</l>
<c></c>
<l>hom_mat2d_identity(transformMatrixScale)</l>
<l>hom_mat2d_scale_local(transformMatrixScale, XLD_SCALE_FACTOR, XLD_SCALE_FACTOR, transformMatrixScale)</l>
<l>affine_trans_contour_xld(xldModel, xldModelScaled, transformMatrixScale)</l>
<c></c>
<l>dev_close_window()</l>
<l>dev_open_window(150, 300, xldModelWidthScaled, xldModelHeightScaled, 'black', windowHandle)</l>
<l>dev_display(xldModelScaled)</l>
<l>*stop()</l>
<c></c>
<c>* read in our image</c>
<l>read_image(imgOriginal, '7_segment_pass.png')</l>
<c></c>
<c>* get the width and height of the image so we can open the window to the correct size in the next line</c>
<l>get_image_size(imgOriginal, imageWidth, imageHeight)</l>
<c></c>
<c>* open a window, scale the window down to 1/2 size so we can see the entire image</c>
<l>dev_close_window()</l>
<l>dev_open_window(100, 100, imageWidth / 2, imageHeight / 2, 'black', windowHandle)</l>
<c></c>
<c>* show the image</c>
<l>dev_display(imgOriginal)</l>
<c></c>
<c>* create the shape model from the DXF xld contours</c>
<l>create_shape_model_xld(xldModelScaled, 'auto', rad(-5.0), rad(10.0), 'auto', 'auto', 'ignore_local_polarity', 5, modelID)</l>
<c></c>
<c>* find the model in the image</c>
<l>find_shape_model(imgOriginal, modelID, rad(-5.0), rad(10), 0.5, 1, 0.5, 'least_squares', 0, 0.9, centerYs, centerXs, angles, scores)</l>
<c></c>
<c>* center the match and visualize</c>
<l>vector_angle_to_rigid(0, 0, 0, centerYs, centerXs, angles, homMat2D)</l>
<l>get_shape_model_contours(modelContours, modelID, 1)</l>
<l>affine_trans_contour_xld(modelContours, xldModel, homMat2D)</l>
<c></c>
<c>* call to set_shape_model_metric, note there is no return value (data is internally stored with modelID ??)</c>
<l>set_shape_model_metric(imgOriginal, modelID, homMat2D, 'use_polarity')</l>
<c></c>
<c>* read an image</c>
<l>read_image(imgOriginal, '7_segment_fail_1')</l>
<c></c>
<c>* find the shape model again, will be slightly faster this time due to previous call to set_shape_model_metric</c>
<l>find_shape_model(imgOriginal, modelID, rad(-5.0), rad(10), 0.5, 1, 0.5, 'least_squares', 0, 0.9, centerYs, centerXs, angles, scores)</l>
<c></c>
<c>* center the match and visualize</c>
<l>vector_angle_to_rigid(0, 0, 0, centerYs, centerXs, angles, homMat2D)</l>
<l>get_shape_model_contours(modelContours, modelID, 1)</l>
<l>affine_trans_contour_xld(modelContours, xldModel, homMat2D)</l>
<c></c>
<c>* try converting both to regions, find the difference</c>
<l>threshold(imgOriginal, regThresh, 75, 255)</l>
<l>gen_region_contour_xld(xldModel, regModel, 'filled')</l>
<l>symm_difference(regThresh, regModel, regDiff)</l>
<l>connection(regDiff, regConnected)</l>
<l>select_shape(regConnected, selectedRegions, 'inner_radius', 'and', 4, 99999999)</l>
<c></c>
<l>* erosion_rectangle1(regDiff, regDiff, 5, 5)</l>
<l>* dilation_rectangle1(regDiff, regDiff, 5, 5)</l>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
